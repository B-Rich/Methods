using System;
using System.Linq.Expressions;
using System.Reflection;
using System.Reflection.Emit;

namespace Methods.ExpressionHash {
    public static class ExpressionHashUtil {
        ///<summary>Example description of a hash function.</summary>
        public static DynamicHasher SumProductXor = new DynamicHasher {
            InitialState = new[] {0, 0, 3, 0},
            Steps = new[] {
                // a1 += input
                new DynamicHasher.Step {
                    LeftInputIndex = 1, 
                    RightInputIndex = 0, 
                    Operation = DynamicHasher.Operation.Add, 
                    OutputIndex = 1
                },
                // a1 *= 3
                new DynamicHasher.Step {
                    LeftInputIndex = 1, 
                    RightInputIndex = 2, 
                    Operation = DynamicHasher.Operation.Multiply, 
                    OutputIndex = 1
                },
                // output ^= a1
                new DynamicHasher.Step {
                    LeftInputIndex = 3, 
                    RightInputIndex = 1, 
                    Operation = DynamicHasher.Operation.Xor, 
                    OutputIndex = 3
                }
            }
        };

        /// <summary>
        /// The function generated by specializing the hash function returned by SumProductXor.
        /// Obtained by:
        /// 1. Evaluating Specialize to get the expression representing the method.
        /// 2. Passing the method expression to WriteMethodToAssembly (below) to get an assembly.
        /// 3. Decompiling the assembly (with a tool like reflector).
        /// </summary>
        public static int SpecializedSumProductXorFunction(IntStream stream1) {
            var num2 = 0;
            var num3 = 0;
            var num4 = 3;
            var num5 = 0;
            var buffer = new[] {0x1000};
            while (true) {
                var num = stream1.Read(buffer);
                if (num == 0) {
                    return num5;
                }
                var num6 = 0;
                while (num6 < num) {
                    var index = num6;
                    num6 = index + 1;
                    num2 = buffer[index];
                    num3 += num2;
                    num3 *= num4;
                    num5 ^= num3;
                }
            }
        }

        /// <summary>
        /// Writes an assembly, containing the given method, to the working directory.
        /// The assembly, type, and method are named based on the given hash name.
        /// </summary>
        public static void WriteMethodToAssembly<T>(Expression<T> method, string hashName) {
            var assemblyName = new AssemblyName(hashName);
            var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndSave);
            var moduleBuilder = assemblyBuilder.DefineDynamicModule(assemblyName.Name, assemblyName.Name + ".dll");
            var typeBuilder = moduleBuilder.DefineType(hashName, TypeAttributes.Public);
            var methodBuilder = typeBuilder.DefineMethod("Run" + hashName, MethodAttributes.Public | MethodAttributes.Static);
            method.CompileToMethod(methodBuilder);

            typeBuilder.CreateType();
            assemblyBuilder.Save(hashName + ".dll");
        }
    }
}